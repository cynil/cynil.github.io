[
    {
        "id": 45,
        "title": "Task 45：多功能相册之木桶布局",
        "content": "使用JavaScript、CSS，实现类似一些摄影网站（如 500px、flickr 等）的木桶布局：每张图片的占位长宽比和图片本身的长宽比一致；每一行的高度不固定，但是要尽可能接近；每行的图片数也是不同的，在一定范围内，通过控制图片是否加入当前行，保证行高尽可能接近。",
        "date": "2016/7/10"
    },
    {
        "id": 44,
        "title": "Task 44：多功能相册之瀑布布局",
        "content": "使用JavaScript、CSS，实现一个瀑布布局。",
        "date": "2016/7/3"
    },
    {
        "id": 8,
        "title": "Task 8: 响应式网格（栅格化）布局",
        "content": "使用HTML与CSS实现类似BootStrap的响应式12栏网格布局，根据屏幕宽度，元素占的栏数不同。调整浏览器宽度看响应式效果。",
        "date": "2016/3/23"
    },
    {
        "id": 41,
        "title": "Task 41: UI组件之日历（二）",
        "content": "实现一个datepicker日历组件",
        "date": "2016/4/26"
    },
    {
        "id": 10,
        "title": "Task 10: Flexbox布局练习",
        "content": "使用Flexbox布局实现屏幕宽度小于640px时，调整Flexbox的属性以实现第四个元素移动到最前面的效果，而不要改动第一个元素的边框颜色与高度。",
        "date": "2016/3/26"
    },
    {
        "id": 17,
        "title": "Task 17: 零基础JavaScript编码（五）",
        "content": "用DOM实现一个柱状图图表",
        "date": "2016/4/1"
    },
    {
        "id": 6,
        "title": "Task 6: 通过HTML及CSS模拟报纸排版",
        "content": "参考PSD设计稿，实现页面开发，页面中的各字体大小，内外边距参照标注图，页面定宽，不需要写JavaScript。在Chrome中完美实现符合标注中的各项说明。",
        "date": "2016/3/22"
    },
    {
        "id": 7,
        "title": "Task 7: 常见技术产品官网页面架构及样式布局",
        "content": "通过HTML及CSS实现常见技术产品官网PSD设计稿。设计稿是有一定宽度的，这个宽度为页面的最小宽度，当浏览器窗口宽度小于设计稿宽度时，允许出现横向滚动条，页面内容宽度保持不变，但是当浏览器窗口宽度大于设计稿宽度时，页面部分内容的宽度应该保持和浏览器窗口宽度一致。",
        "date": "2016/3/22"
    },
    {
        "id": 24,
        "title": "Task 24: JavaScript和树（三）",
        "content": "创建一棵树，添加节点的选择、增加与删除的功能。点击节点元素，则该节点元素呈现一个特殊被选中的样式，增加一个删除按钮，增加一个输入框及一个“添加”按钮，当选中某个节点元素后，点击增加按钮，则在该节点下增加一个子节点，节点内容为输入框中内容，插入在其子节点的最后一个位置。",
        "date": "2016/4/14"
    },
    {
        "id": 26,
        "title": "Task 26: 行星与飞船（一）",
        "content": "创建一个虚拟宇宙，包括一个行星和飞船。每个飞船由动力系统、能源系统、自爆系统组成。行星上有一个指挥官，指挥官通过行星上的信号发射器发布命令。发出的命令是通过一种叫做Mediator的介质进行广播，在发射过程中，有30%的信息传送失败（丢包）概率，每个飞船接受到通过Mediator传达过来的指挥官的信号。",
        "date": "2016/6/12"
    },
    {
        "id": 37,
        "title": "Task 37: UI组件之浮出层",
        "content": "实现一个浮出层的UI组件浮出层。浮出层的样式、内容和逻辑尽量解耦，提供使用JavaScript控制浮出层展现和关闭的接口。",
        "date": "2016/4/12"
    },
    {
        "id": 38,
        "title": "Task 38: UI组件之可排序表格",
        "content": "实现一个支持列排序的表格组件，提供生成表格的接口，数据、样式尽量低耦合，可以配置对哪些列支持排序功能，并在表头进行排序按钮的显示，提供点击排序按钮后的响应接口，并提供默认的排序方法，当提供的接口没有具体实现时，按默认的排序方法进行排序操作，并更新表格中的数据显示。",
        "date": "2016/4/16"
    }
]